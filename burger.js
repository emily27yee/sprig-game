const player = "p"
const meat = "m"
const cheese = "c"
const tomato = "t"
const lettuce = "l"
const topBun = "b"

setLegend(
  [ player, bitmap`
................
................
................
................
................
................
................
................
................
................
..CCCCCCCCCCCC..
...CCCCCCCCCC...
....CCCCCCCC....
................
................
................` ],
  [ meat, bitmap`
................
................
................
................
................
................
...C0CC0CC03C...
..C0CC0CC0CC0C..
..0CC0C30CC0CC..
...C0CC0C30CC...
................
................
................
................
................
................`],
  [ cheese, bitmap`
................
................
................
................
................
.........66.....
.......666666...
.....666666666..
...666666666666.
..66666666666...
....6666666.....
......666.......
................
................
................
................`],
  [ tomato, bitmap`
................
................
................
................
................
................
................
....3333333333..
...332322232333.
...333232323233.
....3333333333..
................
................
................
................
................`],
  [ lettuce, bitmap`
................
................
................
................
.......DF..DD...
...DF.DDDDDD....
..DDDD44D4DDDF..
....FD4D4DD4DF..
..DDDDDDD4DDDD..
...FDD.DDDDD....
.......D..FF....
................
................
................
................
................`],
  [ topBun, bitmap`
................
................
................
.....CCCC2C.....
....CC6C6CCC....
...C6CCCCC6CC...
..CCC2C6CCC2CC..
..CCCCCCCCCCCC..
................
................
................
................
................
................
................
................`]
)

setSolids([player])

let level = 0
const levels = [
  map`
1....
.....
.....
.....
..p..`
]

setMap(levels[level])

setPushables({
  [ player ]: []
})

const level1burger = ['m', 'c', 'b'];
const burgerLevels = [level1burger];
let collectedFood1 = [];
let collectedFood2 = [];

onInput("a", () => {
  getFirst(player).x -= 1
  
  collectedFood1.forEach((food) => {
    food.x = getFirst(player).x
  })
})

onInput("d", () => {
  getFirst(player).x += 1
  
  collectedFood1.forEach((food) => {
    food.x = getFirst(player).x
  })
})

const foodTypes = [meat, cheese, tomato, lettuce, topBun];

function randFood() {
  let num = Math.floor(Math.random() * 5);
  return foodTypes[num];
}

let foods = [];

function addFood() {
  let x = Math.floor(Math.random() * 5);
  let y
  if (x == 0)
    y = 1;
  else
    y = 0;
  let newFood = addSprite(x, y, randFood());
  foods.push(newFood);
}

function fallingFood() {
  foodTypes.forEach(type => {
    getAll(type).forEach(food => {
      setTimeout(() => {
        food.y += 1;
      }, 1000)
    }) 
  })
}

function removeFood() {
  foodTypes.forEach(type => {
    getAll(type).forEach(food => {
      if (food.y == 4 && !(food.x === getFirst(player).x)) {
        let x = food.x;
        let y = food.y;
      food.remove();
      }
    })
  })
}

function stackingFood() {
  foodTypes.forEach(type => {
    getAll(type).forEach(food => {
      if (food.x === getFirst(player).x && food.y === getFirst(player).y) {
        collectedFood1.push(food)
        collectedFood2.push(food.type)
        console.log(collectedFood2)
      }
    })
  })
}

let win = false;
function checkWin() {
  if (burgerLevels[level].length !== collectedFood1.length) {
    win = false;
  }
  // not working yet
  for (let i = 0; i < burgerLevels[level].length && collectedFood2.length; i++) {
    if (burgerLevels[level][i] === collectedFood2[i]) {
      win = true;
    }
    else {
      win = false;
      break;
    }
  }
  if (win) {
    addText("You Win", {
              x: 10,
              y: 0,
              color: color`black`
            });
  }
  else {
      addText("You Lose", {
              x: 10,
              y: 0,
              color: color`black`
            });
  }
  clearInterval(runGame);
}

var runGame = setInterval(() => {
  addFood();
  fallingFood();
  removeFood();
  stackingFood();
  // this works
  if (collectedFood2.includes(topBun)) {
    console.log("Finished")
    checkWin();
  }
}, 1000);
